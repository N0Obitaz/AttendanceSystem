@page
@model AttendanceSystem.Pages.ScanQR.ScanQRModel
@{
    ViewData["Title"] = "Scan QR & Log Location";
}

<h2>@ViewData["Title"]</h2>

<!-- QR Scanner Form -->
<form method="post" enctype="multipart/form-data">
    <input type="file" asp-for="InputFile" />
    <button type="submit" asp-page-handler="Scan">Scan QR</button>
</form>

<hr />

<h3>QR Output</h3>
<p><strong>Email:</strong> @Model.OutputEmail</p>
<p><strong>Last Name:</strong> @Model.LastName</p>
<p><strong>Student Number:</strong> @Model.StudentNumber</p>

<hr />

<!-- Location Section -->
<h3>My Location</h3>
<button id="btnLocation">Log My Location</button>

<div id="locationDisplay" style="margin-top:10px;">
    <p><strong>Latitude:</strong> <span id="lat">—</span></p>
    <p><strong>Longitude:</strong> <span id="lon">—</span></p>
    <p><strong>Accuracy:</strong> <span id="acc">—</span> meters</p>
</div>

<p id="locationResult" style="margin-top:10px; color:green;"></p>
<p id="LocationSuccess" style="margin-top:10px; color:green;"></p>

@section Scripts {
    <script>
        document.getElementById("btnLocation").addEventListener("click", async () => {
            if (!navigator.geolocation) {
                alert("Geolocation not supported.");
                return;
            }

            navigator.geolocation.getCurrentPosition(async (pos) => {
                console.log("Position:", pos.coords);

                const lat = pos.coords.latitude.toFixed(6);
                const lon = pos.coords.longitude.toFixed(6);
                const acc = pos.coords.accuracy.toFixed(2);

                document.getElementById("lat").innerText = lat;
                document.getElementById("lon").innerText = lon;
                document.getElementById("acc").innerText = acc;

                const data = {
                    latitude: pos.coords.latitude,
                    longitude: pos.coords.longitude,
                    accuracy: pos.coords.accuracy
                };

                try {
                    const response = await fetch("?handler=LogLocation", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();
                    document.getElementById("locationResult").innerText = result.message;
                     document.getElementById("locationResult").innerText = result.success;
                } catch (fetchError) {
                    console.error("Fetch error:", fetchError);
                    document.getElementById("locationResult").innerText = "Error sending location to server";
                }
            }, (err) => {
                console.error("Geolocation error:", err);
                // Proper error handling for PositionError
                let errorMessage = "Error getting Location: ";
                switch (err.code) {
                    case err.PERMISSION_DENIED:
                        errorMessage += "Location access denied by user. Please allow location permissions and try again.";
                        break;
                    case err.POSITION_UNAVAILABLE:
                        errorMessage += "Location information unavailable. Check if GPS is enabled.";
                        break;
                    case err.TIMEOUT:
                        errorMessage += "Location request timed out. Please try again.";
                        break;
                    default:
                        errorMessage += "An unknown error occurred.";
                        break;
                }
                alert(errorMessage);
                document.getElementById("locationResult").innerText = errorMessage;
            }, {
                enableHighAccuracy: true,
                timeout: 10000, // 10 seconds
                maximumAge: 0 // Don't use cached position
            });
        });
    </script>

}
